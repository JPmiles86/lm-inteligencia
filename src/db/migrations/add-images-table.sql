-- Create generated_images table for storing AI-generated images
-- This table stores metadata and references for images generated by Agent-4B

CREATE TABLE IF NOT EXISTS generated_images (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  blog_post_id INTEGER REFERENCES blog_posts(id) ON DELETE CASCADE,
  prompt_id VARCHAR(255) NOT NULL,
  original_prompt TEXT NOT NULL,
  enhanced_prompt TEXT,
  image_url TEXT NOT NULL,
  storage_path TEXT,
  thumbnail_url TEXT,
  
  -- Image metadata
  width INTEGER,
  height INTEGER,
  format VARCHAR(20),
  file_size INTEGER,
  
  -- Generation metadata
  provider VARCHAR(50) NOT NULL,
  model VARCHAR(100),
  generation_time INTEGER, -- milliseconds
  generation_cost DECIMAL(10, 6),
  
  -- Status and quality
  status VARCHAR(50) DEFAULT 'generated',
  quality_score DECIMAL(3, 2),
  alt_text TEXT,
  caption TEXT,
  
  -- Position in content
  position_in_content INTEGER,
  section_title VARCHAR(255),
  importance VARCHAR(20), -- primary, secondary, decorative
  
  -- Timestamps
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_images_blog_post ON generated_images(blog_post_id);
CREATE INDEX IF NOT EXISTS idx_images_prompt_id ON generated_images(prompt_id);
CREATE INDEX IF NOT EXISTS idx_images_status ON generated_images(status);
CREATE INDEX IF NOT EXISTS idx_images_provider ON generated_images(provider);
CREATE INDEX IF NOT EXISTS idx_images_created_at ON generated_images(created_at);

-- Create trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_generated_images_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_generated_images_updated_at
  BEFORE UPDATE ON generated_images
  FOR EACH ROW
  EXECUTE FUNCTION update_generated_images_updated_at();